/*flexberryautogenerated="false"*/

namespace IIS.АСУ_Кондитерская
{
    using ICSSoft.STORMNET;
    using ICSSoft.STORMNET.Web.Controls;
    using ICSSoft.STORMNET.Web.AjaxControls;
    using ICSSoft.STORMNET.Business;
    using ICSSoft.STORMNET.FunctionalLanguage.SQLWhere;
    using ICSSoft.STORMNET.FunctionalLanguage;
    using System.Linq;
    using ICSSoft.STORMNET.Business.LINQProvider;

    public partial class ЧекE : BaseEditForm<Чек>
    {
        /// <summary>
        /// Конструктор формы.
        /// </summary>
        public ЧекE()
            : base(Чек.Views.ЧекE)
        {            
        }

        /// <summary>
        /// Путь до формы.
        /// </summary>
        public static string FormPath
        {
            get { return "~/forms/CHek/CHekE.aspx"; }
        }

        /// <summary>
        /// Вызывается самым первым в Page_Load.
        /// </summary>
        protected override void Preload()
        {
                       
        }

        /// <summary>
        /// Здесь лучше всего писать бизнес-логику, оперируя только объектом данных.
        /// </summary>
        protected override void PreApplyToControls()
        {
            var currentUser = Context.User.Identity.Name;

            IDataService ds = DataServiceProvider.DataService;
            var lcs = LoadingCustomizationStruct.GetSimpleStruct(typeof(Продавец), "ПродавецL");
            SQLWhereLanguageDef ld = SQLWhereLanguageDef.LanguageDef;
            lcs.LimitFunction = ld.GetFunction(ld.funcEQ,
                new VariableDef(ld.StringType, Information.ExtractPropertyPath<Продавец>(x => x.Логин)), currentUser);
            var manager = ds.LoadObjects(lcs)[0] as Продавец;

            this.DataObject = new Чек
            {
                Продавец = manager
            };
            ctrlПродавец.Enabled = false;

            IQueryable<ИндивидуальныйЗаказ> limit =
                ds.Query<ИндивидуальныйЗаказ>(ИндивидуальныйЗаказ.Views.ИндивидуальныйЗаказE).Where(order =>
                order.ТорговаяТочка.__PrimaryKey.Equals(manager.ТорговаяТочка.__PrimaryKey));
            Function limitfunc = LinqToLcs.GetLcs(limit.Expression, ИндивидуальныйЗаказ.Views.ИндивидуальныйЗаказE).LimitFunction;

            ctrlИндивидуальныйЗаказ.LimitFunction = limitfunc;
        }

        /// <summary>
        /// Здесь лучше всего изменять свойства контролов на странице,
        /// которые не обрабатываются WebBinder.
        /// </summary>
        protected override void PostApplyToControls()
        {
            Page.Validate();
        }

        /// <summary>
        /// Вызывается самым последним в Page_Load.
        /// </summary>
        protected override void Postload()
        {
        }

        /// <summary>
        /// Валидация объекта для сохранения.
        /// </summary>
        /// <returns>true - продолжать сохранение, иначе - прекратить.</returns>
        protected override bool PreSaveObject()
        {
            return base.PreSaveObject();
        }

        /// <summary>
        /// Нетривиальная логика сохранения объекта.
        /// </summary>
        /// <returns>Объект данных, который сохранился.</returns>
        protected override DataObject SaveObject()
        {
            return base.SaveObject();
        }

        protected void ctrlИндивидуальныйЗаказ_Init(object sender, System.EventArgs e)
        {
            // настроить отображение продуктов из заказа в чеке
        }

        protected void ctrlИндивидуальныйЗаказ_Load(object sender, System.EventArgs e)
        {
            // отфильтровать список доступных заказов (в соотв. с текущей торговой точкой и статусом "Выполненный")

            /*IDataService ds = DataServiceProvider.DataService;
            var lcs = LoadingCustomizationStruct.GetSimpleStruct(typeof(СтрокаЗаказа), "СтрокаЗаказаE");
            SQLWhereLanguageDef ld = SQLWhereLanguageDef.LanguageDef;
            lcs.LimitFunction = ld.GetFunction(ld.funcEQ,
                new VariableDef(ld.GuidType, Information.ExtractPropertyPath<СтрокаЗаказа>(x => x.Заказ)), UpdatedObject.__PrimaryKey);
            var order_points = ds.LoadObjects(lcs);

            foreach (var point in order_points)
            {
                var product_key = ((СтрокаЗаказа)point).Продукт.__PrimaryKey;

                // Загружаем требуемые продукты, которые хранятся на складе в цехе
                var lcs2 = LoadingCustomizationStruct.GetSimpleStruct(typeof(ГотовыйПродукт), "ГотовыйПродуктE");
                lcs2.LimitFunction = ld.GetFunction(ld.funcEQ,
                    new VariableDef(ld.GuidType, Information.ExtractPropertyPath<ГотовыйПродукт>(x => x.Продукт)), product_key);
                var complete_products = ds.LoadObjects(lcs2);

                // Посчитаем, сколько готовых продуктов (с разной датой изготовления) содержится на складе
                int total_count = 0;
                foreach (var comp_prod in complete_products)
                {
                    total_count += ((ГотовыйПродукт)comp_prod).НаСкладе;
                }

                // Если продукции меньше, чем требуется в заказе, то кидаем исключение
                if (total_count < ((СтрокаЗаказа)point).Количество)
                {
                    throw new Exception(((СтрокаЗаказа)point).Продукт.Наименование.ToString() + ". На складе - " + total_count.ToString() + ". Требуется - " +
                        ((СтрокаЗаказа)point).Количество.ToString() + ". Перевод заказа в статус \"Выполненный\" невозможно.");
                }
            }
            ctrlИндивидуальныйЗаказ.LimitFunction*/
        }
    }
}