/*flexberryautogenerated="false"*/

namespace IIS.АСУ_Кондитерская
{
    using ICSSoft.STORMNET;
    using ICSSoft.STORMNET.Web.Controls;
    using ICSSoft.STORMNET.Web.AjaxControls;
    using ICSSoft.STORMNET.Business;
    using ICSSoft.STORMNET.FunctionalLanguage.SQLWhere;
    using ICSSoft.STORMNET.FunctionalLanguage;
    using System.Linq;
    using ICSSoft.STORMNET.Business.LINQProvider;
    using ICSSoft.STORMNET.Windows.Forms;
    using ICSSoft.STORMNET.Web.Tools.WGEFeatures;
    using System;

    public partial class ЧекE : BaseEditForm<Чек>
    {
        /// <summary>
        /// Конструктор формы.
        /// </summary>
        public ЧекE()
            : base(Чек.Views.ЧекE)
        {
        }

        /// <summary>
        /// Путь до формы.
        /// </summary>
        public static string FormPath
        {
            get { return "~/forms/CHek/CHekE.aspx"; }
        }

        /// <summary>
        /// Вызывается самым первым в Page_Load.
        /// </summary>
        protected override void Preload()
        {
        }

        /// <summary>
        /// Здесь лучше всего писать бизнес-логику, оперируя только объектом данных.
        /// </summary>
        protected override void PreApplyToControls()
        {
            ExternalLangDef ld = ExternalLangDef.LanguageDef;
            if (Context.User.IsInRole("Продавец"))
            {
                if (this.DataObject == null)
                {
                    // Определяем текущего пользователя
                    var currentUser = Context.User.Identity.Name;
                    IDataService ds = DataServiceProvider.DataService;
                    var lcs = LoadingCustomizationStruct.GetSimpleStruct(typeof(Продавец), "ПродавецL");
                    lcs.LimitFunction = ld.GetFunction(ld.funcEQ,
                        new VariableDef(ld.StringType, Information.ExtractPropertyPath<Продавец>(x => x.Логин)), currentUser);
                    var manager = ds.LoadObjects(lcs)[0] as Продавец;

                    // Устанавливаем текущего продавца в поле заказа
                    NewPlatform.Flexberry.Orm.KeyGen.SystemGuidGenerator generator = new NewPlatform.Flexberry.Orm.KeyGen.SystemGuidGenerator();
                    this.DataObject = new Чек()
                    {
                        //__PrimaryKey = generator.Generate(typeof(Чек)),
                        Продавец = manager,
                        ТорговаяТочка = manager.ТорговаяТочка
                    };
                    
                    // Фильтруем список индивидуальных заказов в соотв. с торговой точкой, на которой работает текущий продавец
                    ctrlИндивидуальныйЗаказ.MasterViewName = ИндивидуальныйЗаказ.Views.ИндивидуальныйЗаказE.Name;
                    ctrlИндивидуальныйЗаказ.LimitFunction = ld.GetFunction(ld.funcAND,
                        ld.GetFunction(ld.funcEQ,
                            new VariableDef(ld.GuidType, Information.ExtractPropertyPath<ИндивидуальныйЗаказ>(order => order.ТорговаяТочка)),
                            manager.ТорговаяТочка.__PrimaryKey),
                        ld.GetFunction(ld.funcEQ,
                            new VariableDef(ld.StringType, Information.ExtractPropertyPath<ИндивидуальныйЗаказ>(order => order.Состояние)),
                            EnumCaption.GetCaptionFor(СостояниеЗаказа.Выполненный)));
                }
                // отображаем в возможных позициях в чеке только те продукты, которые есть в продаже на этой торговой точке
                ctrlПозицияВЧеке.AddLookUpSettings(Information.ExtractPropertyPath<ПозицияВЧеке>(r => r.Продукт), new LookUpSetting()
                {
                    LimitFunction = ld.GetFunction(ld.funcExist,
                        new DetailVariableDef(ld.GetObjectType("Details"), "ПродуктНаПродажу", ПродуктНаПродажу.Views.ПродуктНаПродажуE, "Продукт", null),
                        ld.GetFunction(ld.funcEQ,
                            new VariableDef(ld.StringType, Information.ExtractPropertyPath<ПродуктНаПродажу>(r => r.ТорговаяТочка)),
                            this.DataObject.ТорговаяТочка.__PrimaryKey)),
                    ColumnsSort = new ColumnsSortDef[] { new ColumnsSortDef("Код", SortOrder.Asc) }
                });                
                ctrlПродавец.Enabled = false;
                ctrlТорговаяТочка.Enabled = false;
                ctrlИндивидуальныйЗаказ.Enabled = false;
                if (this.DataObject.GetStatus() == ObjectStatus.Created)
                    ctrlИндивидуальныйЗаказ.Enabled = true;
                if (DataObject.Состояние == СостояниеЧека.Закрытый)
                {
                    ctrlСостояние.Enabled = false;
                }
            }          
        }

        /// <summary>
        /// Здесь лучше всего изменять свойства контролов на странице,
        /// которые не обрабатываются WebBinder.
        /// </summary>
        protected override void PostApplyToControls()
        {
            Page.Validate();
            IDataService ds = DataServiceProvider.DataService;

            string postbackControl = Page.Request.Params.Get("__EVENTTARGET");
            if (Page.IsPostBack && postbackControl == ctrlИндивидуальныйЗаказ.ControlToEditClientID)
            {
                //ExternalLangDef ld = ExternalLangDef.LanguageDef;
                if (this.DataObject.ИндивидуальныйЗаказ != null)
                {
                    DataObject.ДатаЗаполнения = DateTime.Now;
                    DataObject.ПозицияВЧеке = null;
                    ds.UpdateObject(DataObject);
                    
                    ExternalLangDef ld = ExternalLangDef.LanguageDef;
                    var lcs = LoadingCustomizationStruct.GetSimpleStruct(typeof(СтрокаЗаказа), "СтрокаЗаказаE");
                    lcs.LimitFunction = ld.GetFunction(ld.funcEQ,
                        new VariableDef(ld.GuidType, Information.ExtractPropertyPath<СтрокаЗаказа>(str => str.Заказ)),
                        this.DataObject.ИндивидуальныйЗаказ.__PrimaryKey);
                    var orderPoints = ds.LoadObjects(lcs);
                    
                    foreach (СтрокаЗаказа str in orderPoints)
                    {
                        var chekPos = new ПозицияВЧеке()
                        {
                            Чек = this.DataObject,
                            Количество = str.Количество,
                            Продукт = str.Продукт
                        };
                        ds.UpdateObject(chekPos);
                    }
                    DataObject.SetStatus(ObjectStatus.Altered);                    
                    Response.Redirect(GetRedirectUrlAfterSave(DataObject));
                }
            }
        }

        /// <summary>
        /// Вызывается самым последним в Page_Load.
        /// </summary>
        protected override void Postload()
        {
            
        }

        /// <summary>
        /// Валидация объекта для сохранения.
        /// </summary>
        /// <returns>true - продолжать сохранение, иначе - прекратить.</returns>
        protected override bool PreSaveObject()
        {
            return base.PreSaveObject();
        }

        /// <summary>
        /// Нетривиальная логика сохранения объекта.
        /// </summary>
        /// <returns>Объект данных, который сохранился.</returns>
        protected override DataObject SaveObject()
        {
            return base.SaveObject();
        }


        protected void ctrlИндивидуальныйЗаказ_DataBinding(object sender, System.EventArgs e)
        {
            var order = ((MasterEditorAjaxDropDown)sender).Object as ИндивидуальныйЗаказ;
            if (order == null)
                return;

            IDataService ds = DataServiceProvider.DataService;
            foreach (var point in order.СтрокаЗаказа)
            {
                ds.LoadObject((DataObject)point);
            }


            /*
            var lcs = LoadingCustomizationStruct.GetSimpleStruct(typeof(СтрокаЗаказа), "СтрокаЗаказаE");
            ExternalLangDef ld = ExternalLangDef.LanguageDef;
            lcs.LimitFunction = ld.GetFunction(ld.funcEQ,
                new VariableDef(ld.GuidType, Information.ExtractPropertyPath<СтрокаЗаказа>(x => x.)), currentUser);*/
        }
    }
}