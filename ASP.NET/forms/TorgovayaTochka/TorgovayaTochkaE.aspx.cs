/*flexberryautogenerated="false"*/

namespace IIS.АСУ_Кондитерская
{
    using ICSSoft.STORMNET;
    using ICSSoft.STORMNET.Web.Controls;
    using ICSSoft.STORMNET.Web.AjaxControls;
    using ICSSoft.STORMNET.Business;
    using ICSSoft.STORMNET.FunctionalLanguage.SQLWhere;
    using ICSSoft.STORMNET.FunctionalLanguage;
    using System;
    using ICSSoft.STORMNET.Windows.Forms;

    public partial class ТорговаяТочкаE : BaseEditForm<ТорговаяТочка>
    {
        /// <summary>
        /// Конструктор формы.
        /// </summary>
        public ТорговаяТочкаE()
            : base(ТорговаяТочка.Views.ТорговаяТочкаE)
        {
        }

        /// <summary>
        /// Путь до формы.
        /// </summary>
        public static string FormPath
        {
            get { return "~/forms/TorgovayaTochka/TorgovayaTochkaE.aspx"; }
        }

        /// <summary>
        /// Вызывается самым первым в Page_Load.
        /// </summary>
        protected override void Preload()
        {
            
        }

        /// <summary>
        /// Здесь лучше всего писать бизнес-логику, оперируя только объектом данных.
        /// </summary>
        protected override void PreApplyToControls()
        {
            IDataService ds = DataServiceProvider.DataService;
            ExternalLangDef ld = ExternalLangDef.LanguageDef;
            if (Context.User.IsInRole("Продавец"))
            {
                // Определяем текущего пользователя
                var currentUser = Context.User.Identity.Name;                
                var lcs = LoadingCustomizationStruct.GetSimpleStruct(typeof(Продавец), "ПродавецL");
                lcs.LimitFunction = ld.GetFunction(ld.funcEQ,
                    new VariableDef(ld.StringType, Information.ExtractPropertyPath<Продавец>(x => x.Логин)), currentUser);
                var manager = ds.LoadObjects(lcs)[0] as Продавец;

                lcs = LoadingCustomizationStruct.GetSimpleStruct(typeof(ТорговаяТочка), "ТорговаяТочкаE");
                lcs.LimitFunction = ld.GetFunction(ld.funcEQ,
                    new VariableDef(ld.GuidType, "STORMMainObjectKey"), manager.ТорговаяТочка.__PrimaryKey);
                var shop = ds.LoadObjects(lcs)[0] as ТорговаяТочка;

                // Для продавца устанавливаем по умолчанию торговую точку, на которой он работает
                this.DataObject = shop;

                foreach(ПродуктНаПродажу prod in DataObject.ПродуктНаПродажу)
                {
                    if (prod.ДатаУничтожения != null || prod.Осталось==0)
                    {
                        DataObject.ПродуктНаПродажу.RemoveByKey(prod.__PrimaryKey);
                        prod.SetStatus(ObjectStatus.UnAltered);
                    }
                }
            }
            ctrlПродуктНаПродажу.ColSortDef = new ColumnsSortDef[] {
                new ColumnsSortDef("Продукт.Наименование", SortOrder.Asc),
                new ColumnsSortDef("ДатаИзг", SortOrder.Desc)
            };
        }

        /// <summary>
        /// Здесь лучше всего изменять свойства контролов на странице,
        /// которые не обрабатываются WebBinder.
        /// </summary>
        protected override void PostApplyToControls()
        {
            Page.Validate();
        }

        /// <summary>
        /// Вызывается самым последним в Page_Load.
        /// </summary>
        protected override void Postload()
        {
        }

        /// <summary>
        /// Валидация объекта для сохранения.
        /// </summary>
        /// <returns>true - продолжать сохранение, иначе - прекратить.</returns>
        protected override bool PreSaveObject()
        {
            return base.PreSaveObject();
        }

        /// <summary>
        /// Нетривиальная логика сохранения объекта.
        /// </summary>
        /// <returns>Объект данных, который сохранился.</returns>
        protected override DataObject SaveObject()
        {
            return base.SaveObject();
        }

        protected void CheckProducts_Click(object sender, System.EventArgs e)
        {
            IDataService ds = DataServiceProvider.DataService;
            foreach (ПродуктНаПродажу saleProduct in ((ТорговаяТочка)this.DataObject).ПродуктНаПродажу)
            {
                ds.LoadObject(saleProduct.Продукт);
                var period = System.DateTime.Now - saleProduct.ДатаИзг;
                if (period.TotalHours > saleProduct.Продукт.СрокГодности && saleProduct.ДатаУничтожения == null)
                {
                    saleProduct.ДатаУничтожения = DateTime.Now;
                    ds.UpdateObject(saleProduct);
                }                
            }
            this.Response.Redirect(this.Request.RawUrl);
        }
    }
}