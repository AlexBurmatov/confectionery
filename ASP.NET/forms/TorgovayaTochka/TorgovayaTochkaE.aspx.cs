/*flexberryautogenerated="true"*/

namespace IIS.АСУ_Кондитерская
{
    using ICSSoft.STORMNET;
    using ICSSoft.STORMNET.Web.Controls;
    using ICSSoft.STORMNET.Web.AjaxControls;
    using ICSSoft.STORMNET.Business;
    using NewPlatform.Flexberry.Security;

    public partial class ТорговаяТочкаE : BaseEditForm<ТорговаяТочка>
    {
        /// <summary>
        /// Конструктор формы.
        /// </summary>
        public ТорговаяТочкаE()
            : base(ТорговаяТочка.Views.ТорговаяТочкаE)
        {
        }

        /// <summary>
        /// Путь до формы.
        /// </summary>
        public static string FormPath
        {
            get { return "~/forms/TorgovayaTochka/TorgovayaTochkaE.aspx"; }
        }

        /// <summary>
        /// Вызывается самым первым в Page_Load.
        /// </summary>
        protected override void Preload()
        {
            this.ReadOnly = true;
            var ds = DataServiceProvider.DataService;
            var s = ds.SecurityManager;
            var manager = new NewPlatform.Flexberry.Security.UserManager(ds, new Md5PasswordHasher());
            var roles = manager.GetRolesOfUser(Context.User.Identity.Name);
            foreach (var role in roles)
            {
                if (role.Contains("admin"))
                {
                    this.ReadOnly = false;
                    break;
                }
            }
        }

        /// <summary>
        /// Здесь лучше всего писать бизнес-логику, оперируя только объектом данных.
        /// </summary>
        protected override void PreApplyToControls()
        {
        }

        /// <summary>
        /// Здесь лучше всего изменять свойства контролов на странице,
        /// которые не обрабатываются WebBinder.
        /// </summary>
        protected override void PostApplyToControls()
        {
            Page.Validate();
        }

        /// <summary>
        /// Вызывается самым последним в Page_Load.
        /// </summary>
        protected override void Postload()
        {
        }

        /// <summary>
        /// Валидация объекта для сохранения.
        /// </summary>
        /// <returns>true - продолжать сохранение, иначе - прекратить.</returns>
        protected override bool PreSaveObject()
        {
            return base.PreSaveObject();
        }

        /// <summary>
        /// Нетривиальная логика сохранения объекта.
        /// </summary>
        /// <returns>Объект данных, который сохранился.</returns>
        protected override DataObject SaveObject()
        {
            return base.SaveObject();
        }
    }
}